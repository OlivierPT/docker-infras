input {
	beats {
    port => 5044
  }
	stdin { }
}


## Add your filters here
filter {

	## ADD GISEH Meta-Data
	mutate {
		add_field => { "[application][code]" => "1V77" }
		add_field => { "[application][country]" => "FRA" }
		add_field => { "[application][environment]" => "FFA" }

		add_field => { "redisqueue" => "default" }
	}

	### LOGS
	if [type] == "log" {
		mutate {
			update => { "redisqueue" => "filebeat" }
		}

		## CDTNG log file treatment
		if [source] == "/tmp/cdtng.log" {
			csv {
				columns => ["[giseh][cdtng][hostname]", "[giseh][cdtng][kernel]", "[giseh][cdtng][architecture]", "[giseh][cdtng][env]",
									"[giseh][cdtng][user]", "[giseh][cdtng][group]", "[giseh][cdtng][application]", "[giseh][cdtng][command]",
									"[giseh][cdtng][version]", "[giseh][cdtng][start_time]", "[giseh][cdtng][end_time]"]
				separator => ";"
			}
			date {
			    match => ["[giseh][cdtng][start_time]", "MM.dd.YYYY HH:mm:ss"]
					target => "@start_time"
			}
			date {
			    match => ["[giseh][cdtng][end_time]", "MM.dd.YYYY HH:mm:ss"]
					target => "@end_time"
			}
			mutate {
				add_field => { "[giseh][cdtng][exec_time]" => 0 }
			}
			ruby {
					code => 'event.set("[giseh][cdtng][exec_time]", (event.get("@end_time") - event.get("@start_time")) )'
			}
			mutate {
				add_field => { "logtype" => "application" }
			}
			anonymize {
				algorithm => "SHA256"
				fields => ["[giseh][cdtng][user]"]
				key => "GISEHv2"
		  }
		}

		## System Logs files
		else if [source] in [ "/var/log/messages", "/var/log/secure" ] {
			grok {
#				match => { "message" => "%{SYSLOGBASE2} %{GREEDYDATA:syslog_msg}" }
				match => { "message" => "(?:%{SYSLOGTIMESTAMP:timestamp}|%{TIMESTAMP_ISO8601:timestamp8601}) (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource}+(?: %{SYSLOGPROG}:|) %{GREEDYDATA:syslog_msg}" }
			}
			mutate {
				add_field => { "logtype" => "system" }
			}
		}

		## APPLICATION LOG File treatment (multiline... )
		else if [source] =~ "applogs" {
			mutate {
				add_field => { "logtype" => "application" }
			}
		}

	## METRICSETS
	} else if [type] == "metricsets" {
		if [metricset][name] == "process" {
			if ([system][process][cpu][total][pct] < 0.001) {
				mutate {
					add_tag => [ "to_drop" ]
				}
			}
		}

		mutate {
			update => { "redisqueue" => "metricbeat" }
		}
	}

	if "to_drop" in [tags] {
		drop {}
	}
}


output {
	if [fields][staging] == "testing" {
		stdout { codec => rubydebug }
		redis {
			host      => "redis"
			data_type => "list"
			key       => "giseh_%{redisqueue}"
		}
	} else {
		elasticsearch {
			hosts     => "elasticsearch"
		}
	}
}
